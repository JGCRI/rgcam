% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/importgcam.R
\name{addSingleQuery}
\alias{addSingleQuery}
\title{Add a data by running a single on a GCAM output database to a project data set}
\usage{
addSingleQuery(conn, proj, qn, query, scenario = NULL, regions = NULL,
  clobber = FALSE, transformations = NULL, saveProj = TRUE)
}
\arguments{
\item{conn}{A GCAM database to connection extract scenario from.}

\item{proj}{Project to add extracted results to.  Can be either a project
data structure or the name of a project data file.  The file will be created
if it doesn't already exist.}

\item{qn}{The query name to use when storing the results.  We have to provide
this since it might not always be obvious what this is by looking at the \code{query}.}

\item{query}{A Model Interface query to run.  See examples for possible syntax.}

\item{scenario}{Name of scenario to extract.  If \code{NULL}, use the last
scenario in the GCAM database.}

\item{regions}{A list of regions to query.  If \code{NULL}, all regions will
be queries.}

\item{clobber}{If \code{TRUE}, overwrite any existing scenario of the same
name; otherwise, fail if \code{scenario} already exists in the data set.}

\item{transformations}{Transformation functions to apply to the queries (see
details).}

\item{saveProj}{A flag to save the project to disk after data has been added.
A user may want to avoid it if they are for instance calling this method several
times and would prefer to save at the end.  Users can always save at anytime by
calling \code{saveProject}.}
}
\value{
The project dataset with the new scenario added.
}
\description{
This function will run the GCAM Model Interface to extract the query data for
a scenario in a GCAM output database.  The query data is added to a project
data file.  This function accepts just a single query to be run as apposed to
a batch file with several queries. This is typically provided as the
XML typically found in the Main_queries.xml.  See examples for possible syntax
to specify these.
}
\details{
The date value will be clipped from the scenario name and discarded.  If a
newly-read scenario/query is a duplicate of one already in the file, the operation
will fail unless \code{clobber = TRUE}, in which case the old data will
be silently overwritten.

You may optionally specify transformations to apply to the tables returned by
the model interface.  Examples of transformations you might want to apply
include aggregating values or dropping unused columns.  Specify
transformation as a function object, the function should take a single
argument, which will be the original table and should return the modified table
as a data frame.  Do not drop the "scenario" column as part of one of your
transformations; certain types of plots need it.

If everything goes as expected, the new scenario will be added to the data
set and written back into the project data file.  The updated project will also
be returned from the function so that it can be used without having to reread
it.
}
\examples{
# The query must be the same XML found in a GCAM query file:
query_name <- "CO2 emissions by region"
co2_query <- '<emissionsQueryBuilder title="CO2 emissions by region">
                  <axis1 name="region">region</axis1>
                  <axis2 name="Year">emissions</axis2>
                  <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = \\'sector\\' (:collapse:)]//CO2/emissions/node()</xPath>
                  <comments/>
              </emissionsQueryBuilder>'
addSingleQuery(db_connection, "test.proj", query_name, co2_query, "Reference")

# However it could also be given for instance as a query string that will result in such XML:
query_name <- "CO2 emissions by region"
co2_query <- paste0("doc('~gcam/output/queries/Main_queries.xml')//*[@title='",
                    query_name, "']")
addSingleQuery(db_connection, "test.proj", query_name, co2_query, "Reference")

# Alternatively a user may use an XML package if for instance their query file is
# stored locally but are running queries on some remote machine:
library(xml2)
queries <- read_xml("~gcam/output/queries/Main_queries.xml")
query_name <- "CO2 emissions by region"
co2_query <- xml_find_first(queries, paste0("//*[@title='", query_name, "']"))
addSingleQuery(db_connection, "test.proj", query_name, co2_query, "Reference")

}
