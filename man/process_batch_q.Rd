% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gcamparse.R
\name{process_batch_q}
\alias{process_batch_q}
\title{Extract a query from a list of queries and filter to desired output.}
\usage{
process_batch_q(batchq, query, scen, filters, func = sum)
}
\arguments{
\item{batchq}{The structure containing the GCAM results (produced
by \code{\link{parse_mi_output}}).}

\item{query}{The name of the table to extract; i.e., the name of
one of the queries cointained in the GCAM output.}

\item{scen}{The name of the scenario.  Partial matches are allowed.}

\item{filters}{A named vector of filtering criteria in the form
\code{c(header1=value1, header2=value2,...)}.  Headers are the
names of columns in the data frame.  If aggregating data, use the
value 'Aggregate'.  (XXX: Needs further explanation!)}

\item{func}{Operation to apply to the aggregated data.  (XXX: Does
this mean that this option is active only when using the
'Aggregate' option above?)}
}
\description{
Extract the desired table from the structure produced by
\code{\link{parse_mi_output}}.  Optionally, perform some filtering
and transformation on the data.  NB:  This function is obsolete and is
included only for backward compatibility with older code.  See details for
alternatives.
}
\details{
Though this function is not (yet) officially deprecated, it should't be used
in new code.  It isn't actually needed for retrieving tables; use
\code{projectData[[scenario]][[queryName]]} for that.  Likewise, the
filtering and aggregating capabilities are a little arcane.  It's better just
to use \code{dplyr} to make whatever transformations you need to make.  You
can also make the transformations permanent by applying them at import time
using the \code{transformations} argument to \code{\link{addScenario}}.
}
