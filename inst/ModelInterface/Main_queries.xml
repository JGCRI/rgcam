<?xml version="1.0" encoding="UTF-8"?>
<queries>
   <queryGroup name="Primary Energy">
      <supplyDemandQuery title="Primary Energy Consumption (Average Fossil Efficiency Conversion)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/supplysector[@name='electricity' or @name='elect_td_bld']//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='electricity']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 Central Production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 Central Production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 Forecourt Production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 Forecourt Production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
            </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="geothermal-elect" to="i geothermal"/>
               <rewrite from="traditional biomass" to="j traditional biomass"/>
               <rewrite from="nuclear-H2" to="e nuclear"/>
               <rewrite from="biomass" to="d biomass"/>
               <rewrite from="natural gas" to="b natural gas"/>
               <rewrite from="exotic-elect" to="j breakthrough"/>
               <rewrite from="wind-elect" to="g wind"/>
               <rewrite from="elect_td_ind" to=""/>
               <rewrite from="solar-elect" to="h solar"/>
               <rewrite from="solar-H2" to="h solar"/>
               <rewrite from="regional natural gas" to=""/>
               <rewrite from="coal" to="c coal"/>
               <rewrite from="crude oil" to="a oil"/>
               <rewrite from="hydro-elect" to="f hydro"/>
               <rewrite from="nuclear-elect" to="e nuclear"/>
               <rewrite from="wind-H2" to="g wind"/>
               <rewrite from="traded unconventional oil" to="a oil"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Primary Energy Consumption (Direct Equivalent)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='electricity' or @name='elect_td_bld']//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 Central Production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 Forecourt Production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
            </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="geothermal-elect" to="i geothermal"/>
               <rewrite from="traditional biomass" to="j traditional biomass"/>
               <rewrite from="nuclear-H2" to="e nuclear"/>
               <rewrite from="biomass" to="d biomass"/>
               <rewrite from="natural gas" to="b natural gas"/>
               <rewrite from="exotic-elect" to="j breakthrough"/>
               <rewrite from="wind-elect" to="g wind"/>
               <rewrite from="elect_td_ind" to=""/>
               <rewrite from="solar-elect" to="h solar"/>
               <rewrite from="k new" to="k new"/>
               <rewrite from="solar-H2" to="h solar"/>
               <rewrite from="regional natural gas" to=""/>
               <rewrite from="coal" to="c coal"/>
               <rewrite from="crude oil" to="a oil"/>
               <rewrite from="hydro-elect" to="f hydro"/>
               <rewrite from="nuclear-elect" to="e nuclear"/>
               <rewrite from="wind-H2" to="g wind"/>
               <rewrite from="traded unconventional oil" to="a oil"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Primary energy with CCS (Direct Equivalent)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input'],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input'],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input'],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         </xPath>
         <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="traditional biomass" to="j traditional biomass"/>
               <rewrite from="geothermal-elect" to="i geothermal"/>
               <rewrite from="geothermal-elect renewable" to="i geothermal"/>
               <rewrite from="geothermal-elect renewable CCS" to="i geothermal"/>
               <rewrite from="biomass" to="d biomass"/>
               <rewrite from="biomass CCS" to="d biomass CCS"/>
               <rewrite from="regional biomassOil" to="d biomass"/>
               <rewrite from="regional corn for ethanol" to="d biomass"/>
               <rewrite from="regional sugar for ethanol" to="d biomass"/>
               <rewrite from="regional sugarbeet for ethanol" to="d biomass"/>
               <rewrite from="nuclear-H2 renewable" to="e nuclear"/>
               <rewrite from="natural gas" to="b natural gas"/>
               <rewrite from="natural gas CCS" to="b natural gas CCS"/>
               <rewrite from="wind-elect" to="g wind"/>
               <rewrite from="wind-elect renewable" to="g wind"/>
               <rewrite from="wind-elect renewable CCS" to="g wind"/>
               <rewrite from="exotic-elect" to="j breakthrough"/>
               <rewrite from="elect_td_ind" to=""/>
               <rewrite from="solar-elect renewable" to="h solar"/>
               <rewrite from="solar-elect renewable CCS" to="h solar"/>
               <rewrite from="solar-H2 renewable" to="h solar"/>
               <rewrite from="regional natural gas" to=""/>
               <rewrite from="coal" to="c coal"/>
               <rewrite from="coal CCS" to="c coal CCS"/>
               <rewrite from="crude oil" to="a oil"/>
               <rewrite from="crude oil CCS" to="a oil CCS"/>
               <rewrite from="hydro-elect renewable" to="f hydro"/>
               <rewrite from="hydro-elect renewable CCS" to="f hydro"/>
               <rewrite from="nuclear-elect renewable" to="e nuclear"/>
               <rewrite from="nuclear-elect renewable CCS" to="e nuclear"/>
               <rewrite from="traded unconventional oil" to="a oil"/>
               <rewrite from="traded unconventional oil CCS" to="a oil CCS"/>
               <rewrite from="wind-H2 renewable" to="g wind"/>
               <rewrite from="regional biomassOil CCS" to="d biomass CCS"/>
               <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS"/>
               <rewrite from="limestone" to=""/>
               <rewrite from="renewable" to=""/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Resource production">
         <axis1 name="resource">resource</axis1>
         <axis2 name="Year">output</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']//output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Regional primary energy costs">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='regional oil' or @name='regional natural gas' or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Electricity">
      <supplyDemandQuery title="Electricity generation by region (incl rooftop PV and CHP)">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and ((@name='electricity' or @name='elect_td_bld' or @name='industrial energy use'))]//*[@type = 'technology' (:collapse:) and not (@name='elect_td_bld')]/*[@type='output' (:collapse:)  and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity generation by region (central only)">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='electricity') )]//*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity generation by aggregate technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use' )]//*[@type = 'technology' and not (@name='elect_td_bld' or @name='electricity')]/*[@type='output' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="technology">
                <rewrite from="coal (IGCC)" to="a Coal"/>
                <rewrite from="coal (conv pul)" to="a Coal"/>
                <rewrite from="coal (IGCC CCS)" to="b Coal w/CCS"/>
                <rewrite from="gas (CC)" to="c Gas"/>
                <rewrite from="gas (steam/CT)" to="c Gas"/>
                <rewrite from="gas (CC CCS)" to="d Gas w/CCS"/>
                <rewrite from="refined liquids (IGCC)" to="e Oil"/>
                <rewrite from="refined liquids (steam/CT)" to="e Oil"/>
                <rewrite from="refined liquids (IGCC CCS)" to="f Oil w/CCS"/>
                <rewrite from="biomass (IGCC)" to="g Biomass"/>
                <rewrite from="biomass (conv)" to="g Biomass"/>
                <rewrite from="biomass (IGCC CCS)" to="h Biomass w/CCS"/>
                <rewrite from="Gen_III" to="i Nuclear"/>
                <rewrite from="Gen_II_LWR" to="i Nuclear"/>
                <rewrite from="geothermal" to="j Geothermal"/>
                <rewrite from="hydro" to="k Hydro"/>
                <rewrite from="wind" to="l Wind"/>
                <rewrite from="wind_storage" to="l Wind"/>
                <rewrite from="CSP" to="m Solar"/>
                <rewrite from="CSP_storage" to="m Solar"/>
                <rewrite from="PV" to="m Solar"/>
                <rewrite from="PV_storage" to="m Solar"/>
                <rewrite from="rooftop_pv" to="m Solar"/>
                <rewrite from="biomass cogen" to="n CHP"/>
                <rewrite from="coal cogen" to="n CHP"/>
                <rewrite from="gas cogen" to="n CHP"/>
                <rewrite from="refined liquids cogen" to="n CHP"/>
                <rewrite from="hydrogen cogen" to="n CHP"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity generation by technology (inc solar roofs)">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use')]//*[@type = 'technology' and not (@name='elect_td_bld' or @name='electricity')]/*[@type='output' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity Fuel Consumption">
         <axis1 name="fuel">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and @name='electricity']//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Central electricity demand by demand sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector']//*[@type='input' (:collapse:) and (@name='electricity_net_ownuse')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity costs by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='electricity' or @name='elect_td_bld' or @name='elect_td_ind' or @name='elect_td_trn')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity costs by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and @name='electricity']/*[@type = 'subsector']/cost/text()</xPath>
         <comments>doesn't include rooftop PV</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity generation costs by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='elect_td_bld' or @name='electricity')]//*[@type = 'technology' and not(@name='elect_td_bld')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cogeneration by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:)]//*[@type = 'technology' (:collapse:)]/output-secondary[@name='electricity']/physical-output/node()</xPath>
         <comments>all techs of the same name aggregated</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Total electricity delivered">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and ((@name='elect_td_bld' or @name='elect_td_ind' or @name='elect_td_trn') )]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity share-weights by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">share-weight</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and (@name='electricity')]/*[@type = 'subsector']/share-weight/text()</xPath>
         <comments>doesn't include rooftop PV</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Electricity production by technology by vintage">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and @name='electricity']/*[@type = 'subsector']/*[@type = 'technology']/output-primary[@type='output'(:collapse:)]/physical-output/node()</xPath>
         <comments/>
         <showAttribute attribute-name="year" level="technology"/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Refining">
      <supplyDemandQuery title="Refined liquids production by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and @name='refining']//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids use by aggregate end-use">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='refined liquids enduse' or @name='refined liquids industrial')]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids production by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and @name='refining']//*[@type = 'technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refinery inputs by technology">
         <axis1 name="fuel">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='refining' or @name='unconventional oil production')]//*[@type = 'technology']/*[@type='input' and not(@name='unconventional oil')]/demand-physical/node()</xPath>
         <comments>unconv oil production inputs added in their own rows</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids production by technology and vintage">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and @name='refining']/*[@type = 'subsector']/*[@type = 'technology']/*[@type='output'(:collapse:)]/physical-output/node()</xPath>
         <comments/>
         <showAttribute attribute-name="year" level="technology"/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids costs by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='refining' or @name='refined liquids enduse' or @name='refined liquids industrial')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids costs by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and @name='refining']/*[@type = 'subsector']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refined liquids costs by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and @name='refining']//*[@type = 'technology']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Refining share-weights by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">share-weight</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and (@name='refining' or @name='regional oil')]/*[@type = 'subsector']/share-weight/text()</xPath>
         <comments>Includes regional oil for mix between crude and unconventional oils</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Regional oil costs by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and @name='regional oil']/*[@type = 'subsector']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Regional oil production by fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and @name='regional oil']//*[@type = 'technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Other Energy Transformation">
      <supplyDemandQuery title="Hydrogen production by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='H2 central production' or @name='H2 forecourt production') )]//*[@type = 'technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Hydrogen energy consumption by technology">
         <axis1 name="fuel">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and ((@name='H2 central production' or @name='H2 forecourt production') )]//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Hydrogen costs and prices by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='H2 central production' or @name='H2 forecourt production' or @name='H2 enduse' or @name='H2 distribution'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Hydrogen costs by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector' and (@name='H2 central production' or @name='H2 forecourt production')]/*[@type = 'subsector']/cost/text()</xPath>
      </supplyDemandQuery>
      <supplyDemandQuery title="Hydrogen costs by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='H2 central production' or @name='H2 forecourt production'))]/*[@type = 'subsector']/*[@type = 'technology']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Gas production by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='gas processing') )]//*[@type = 'technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Gas processing inputs by technology">
         <axis1 name="fuel">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='gas processing') )]//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Gas pipeline inputs and outputs">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='gas processing' or @name='gas pipeline') )]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Gas costs and prices">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='gas processing' or @name='wholesale gas' or @name='delivered gas'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Gas processing costs by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='gas processing'))]//*[@type = 'technology']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="End-Use Sectors General">
      <supplyDemandQuery title="Total final energy by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector'  (: collapse :) and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' (: collapse :) and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Total final energy by aggregate end-use sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' (: collapse :) and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="N fertilizer" to="industry"/>
               <rewrite from="agriculture energy use" to="industry"/>
               <rewrite from="boilers general" to="industry"/>
               <rewrite from="machine drive" to="industry"/>
               <rewrite from="process heat primary metals" to="industry"/>
               <rewrite from="industrial energy use" to="industry"/>
               <rewrite from="comm cooling" to="building"/>
               <rewrite from="feedstocks construction" to="industry"/>
               <rewrite from="comm other" to="building"/>
               <rewrite from="resid other appliances" to="building"/>
               <rewrite from="feedstocks chemicals" to="industry"/>
               <rewrite from="process heat cement" to="industry"/>
               <rewrite from="cement" to="industry"/>
               <rewrite from="electrochemical" to="industry"/>
               <rewrite from="feedstocks primary metals" to="industry"/>
               <rewrite from="comm lighting" to="building"/>
               <rewrite from="comm office" to="building"/>
               <rewrite from="other end uses" to="industry"/>
               <rewrite from="construction energy use" to="industry"/>
               <rewrite from="comm cooking" to="building"/>
               <rewrite from="resid appliances" to="building"/>
               <rewrite from="resid hot water" to="building"/>
               <rewrite from="resid heating" to="building"/>
               <rewrite from="industrial feedstocks" to="industry"/>
               <rewrite from="comm heating" to="building"/>
               <rewrite from="boilers pulp paper and wood" to="industry"/>
               <rewrite from="comm ventilation" to="building"/>
               <rewrite from="process heat general" to="industry"/>
               <rewrite from="comm hot water" to="building"/>
               <rewrite from="mining energy use" to="industry"/>
               <rewrite from="limestone feedstocks" to=""/>
               <rewrite from="comm others" to="building"/>
               <rewrite from="resid lighting" to="building"/>
               <rewrite from="resid cooling" to="building"/>
               <rewrite from="resid others" to="building"/>
               <rewrite from="resid other" to="building"/>
               <rewrite from="comm refrigeration" to="building"/>
               <rewrite from="trn_aviation_intl" to="transportation"/>
               <rewrite from="trn_freight" to="transportation"/>
               <rewrite from="trn_freight_road" to="transportation"/>
               <rewrite from="trn_pass" to="transportation"/>
               <rewrite from="trn_pass_road" to="transportation"/>
               <rewrite from="trn_pass_road_LDV" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
               <rewrite from="trn_shipping_intl" to="transportation"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Total final energy by detailed end-use sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' (: collapse :) and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Final energy by fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector'  (: collapse :) and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="traditional biomass" to="7 trad biomass"/>
               <rewrite from="H2 enduse" to="6 hydrogen"/>
               <rewrite from="delivered biomass" to="4 biomass"/>
               <rewrite from="refined liquids enduse" to="1 liquids"/>
               <rewrite from="elect_td_bld" to="5 electricity"/>
               <rewrite from="elect_td_trn" to="5 electricity"/>
               <rewrite from="delivered coal" to="3 coal"/>
               <rewrite from="elect_td_ind" to="5 electricity"/>
               <rewrite from="wholesale gas" to="2 gas"/>
               <rewrite from="refined liquids industrial" to="1 liquids"/>
               <rewrite from="delivered gas" to="2 gas"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Final energy by aggregate end-use sector and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="N fertilizer" to="industry"/>
               <rewrite from="agriculture energy use" to="industry"/>
               <rewrite from="boilers general" to="industry"/>
               <rewrite from="machine drive" to="industry"/>
               <rewrite from="process heat primary metals" to="industry"/>
               <rewrite from="industrial energy use" to="industry"/>
               <rewrite from="comm cooling" to="building"/>
               <rewrite from="feedstocks construction" to="industry"/>
               <rewrite from="comm other" to="building"/>
               <rewrite from="resid other appliances" to="building"/>
               <rewrite from="feedstocks chemicals" to="industry"/>
               <rewrite from="process heat cement" to="industry"/>
               <rewrite from="cement" to="industry"/>
               <rewrite from="electrochemical" to="industry"/>
               <rewrite from="feedstocks primary metals" to="industry"/>
               <rewrite from="comm lighting" to="building"/>
               <rewrite from="comm office" to="building"/>
               <rewrite from="other end uses" to="industry"/>
               <rewrite from="construction energy use" to="industry"/>
               <rewrite from="comm cooking" to="building"/>
               <rewrite from="resid appliances" to="building"/>
               <rewrite from="resid hot water" to="building"/>
               <rewrite from="resid heating" to="building"/>
               <rewrite from="industrial feedstocks" to="industry"/>
               <rewrite from="comm heating" to="building"/>
               <rewrite from="boilers pulp paper and wood" to="industry"/>
               <rewrite from="comm ventilation" to="building"/>
               <rewrite from="process heat general" to="industry"/>
               <rewrite from="comm hot water" to="building"/>
               <rewrite from="mining energy use" to="industry"/>
               <rewrite from="limestone feedstocks" to=""/>
               <rewrite from="comm others" to="building"/>
               <rewrite from="resid lighting" to="building"/>
               <rewrite from="resid cooling" to="building"/>
               <rewrite from="resid others" to="building"/>
               <rewrite from="resid other" to="building"/>
               <rewrite from="comm refrigeration" to="building"/>
               <rewrite from="trn_aviation_intl" to="transportation"/>
               <rewrite from="trn_freight" to="transportation"/>
               <rewrite from="trn_freight_road" to="transportation"/>
               <rewrite from="trn_pass" to="transportation"/>
               <rewrite from="trn_pass_road" to="transportation"/>
               <rewrite from="trn_pass_road_LDV" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
               <rewrite from="trn_shipping_intl" to="transportation"/>
            </level>
            <level name="input">
               <rewrite from="traditional biomass" to="7 trad biomass"/>
               <rewrite from="H2 enduse" to="6 hydrogen"/>
               <rewrite from="delivered biomass" to="4 biomass"/>
               <rewrite from="refined liquids enduse" to="1 liquids"/>
               <rewrite from="elect_td_bld" to="5 electricity"/>
               <rewrite from="elect_td_trn" to="5 electricity"/>
               <rewrite from="delivered coal" to="3 coal"/>
               <rewrite from="elect_td_ind" to="5 electricity"/>
               <rewrite from="wholesale gas" to="2 gas"/>
               <rewrite from="refined liquids industrial" to="1 liquids"/>
               <rewrite from="delivered gas" to="2 gas"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Final energy by detailed end-use sector and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Service output by detailed end-use sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='output' (: collapse :)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fuel prices to all end-use sectors">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='wholesale gas' or @name='delivered gas' or @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or @name='H2 enduse' or @name='refined liquids industrial' or @name='refined liquids enduse'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Buildings">
      <supplyDemandQuery title="Building total final energy by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type='input' (:collapse:)]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building total final energy by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type='input' (:collapse:)]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building final energy by fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building final energy by service and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building final energy by technology and fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building service output by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type='output' (:collapse:) and not(@name= 'internal-gains')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building service output by subsector (fuel)">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/*[@type = 'subsector']//*[@type='output' (:collapse:) and not(@name= 'internal-gains')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building service output by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//*[@type = 'technology']/*[@type='output' (:collapse:) and not(@name= 'internal-gains')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building internal gain energy by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector']//*[@type='output' (:collapse:) and (@name= 'internal-gains')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building floorspace">
         <axis1 name="Building">gcam-consumer[@name]</axis1>
         <axis2 name="Year">floorspace[@year]</axis2>
         <xPath buildList="true" dataName="floorspace" group="false" sumAll="false">gcam-consumer//floorspace/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building Floorspace per capita">
         <axis1 name="Floorspace">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="percapita floorspace" group="false" sumAll="false"> 
                     declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
                         let $scn := $parent/ancestor::scenario,
                              $rgn := $parent/ancestor::region,
                             $consumer := $parent/ancestor::gcam-consumer
                           return
                              document { element scenario {
                                                $scn/@*,
                                                element region {
                                                    $rgn/@*,
                                                    element gcam-consumer {
                                                        $consumer/@*,
                                                        $append
                                                    }
                                                }
                                            }
                            }
                     };  
                     declare function local:get-percapita($inputs as node()*) as node()* {
                     unordered {    
                     for $input in $inputs
                     let $new_input :=  
                     element input {
                         attribute type {'input'},
                         attribute name { $input/@name },
                         for $demand in $input/floorspace
                         return 
                             element demand-physical {
                             attribute vintage {$demand/@year},
                             (: TODO: hard coding units :)
                             attribute unit { 'm^2/person'},
                             (: floorspace is billion m^2 and population is 1000 people and we want m^2/persion :)
                             text { $demand/text() div $input/ancestor::gcam-consumer/subregional-population[@year=$demand/@year] * 1000000 }
                         }
                     },
                     $new_root := local:append-heirarchy($input/parent::*/parent::*, $new_input)
                     return $new_root//text()
                     } 
                     };
                     declare function local:run-get-percapita($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {     
                     let $regionsG := if(not($regions[1] = 'Global'))
                              then $regions
                              else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                     return
                     for $scenario in $scenarios,       
                     $region in $regionsG   
                     let $scenario_split := tokenize($scenario, ' '),       
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
                     return 
                        local:get-percapita($currTree/gcam-consumer//building-node-input)
                        
         }; 
                 local:run-get-percapita((:scenarios:), (:regions:), (:collection:))
            </xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fuel prices to buildings">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='delivered gas' or @name='delivered coal' or @name='traditional biomass' or @name='delivered biomass' or @name='elect_td_bld' or @name='refined liquids enduse'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building Service Prices">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building Service Density">
         <axis1 name="Building Service">input[@name]</axis1>
         <axis2 name="Year">service-density[@year]</axis2>
         <xPath buildList="true" dataName="service density" group="false" sumAll="false">gcam-consumer//*[@type='input']/service-density/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Total service cost by unit floorspace">
         <axis1 name="Building">building-node-input[@name]</axis1>
         <axis2 name="Year">price[@year]</axis2>
         <xPath buildList="true" dataName="cost by unit floorspace" group="false" sumAll="false">gcam-consumer//building-node-input/price/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Building service satiation impedance">
         <axis1 name="Building Service">input[@name]</axis1>
         <axis2 name="Year">satiation-impedance[@year]</axis2>
         <xPath buildList="true" dataName="satiation impedance" group="false" sumAll="false">gcam-consumer//*[@type='input']/satiation-impedance/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Industry">
      <supplyDemandQuery title="Industry total final energy by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type='input' (:collapse:) and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry total final energy by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type='input' (:collapse:) and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry final energy by fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type='input' and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry final energy by service and fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type='input' and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry final energy by collapsed technology and fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type = 'technology']/*[@type='input' (: collapse :) and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments>all techs of the same name aggregated</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry final energy by technology and fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/*[@type = 'subsector']/*[@type = 'technology']/*[@type='input' and not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='industrial processes')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry feedstocks by type">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='industrial feedstocks' or @name='feedstocks construction' or @name='feedstocks chemicals' or @name='feedstocks primary metals')]//*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry primary output by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type='output' (:collapse:) and not(@name='electricity')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry primary output by collapsed technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type = 'technology' and not(@name='industry')]/*[@type='output' (:collapse:) and not(@name='electricity')]/physical-output/node()</xPath>
         <comments>all techs of the same name aggregated</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industry primary output by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//*[@type = 'technology' and not (@name='industry')]/*[@type='output' (:collapse:) and not(@name='electricity')]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cogeneration by collapsed technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">/output-secondary[@name='electricity' and @type='output']/physical-output/node()</xPath>
         <comments>all techs of the same name aggregated</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cogeneration by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector']//output-secondary[@name='electricity' and @type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cement production by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='cement')]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cement production by technology">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='cement')]//*[@type = 'technology']/*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Inputs to cement production">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='cement' or @name='process heat cement')]//*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fuel prices to industry">
         <axis1 name="fuel">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='wholesale gas' or @name='delivered coal' or @name='delivered biomass' or @name='H2 enduse' or @name='elect_td_ind' or @name='refined liquids industrial'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Costs of industrial services">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Costs of industrial output">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or @name='chemicals' or @name='food processing' or @name='iron and steel' or @name='other nonmetallic minerals' or @name='aluminum and nonferrous metals' or @name='pulp paper and wood' or @name='other manufacturing' or @name='agriculture' or @name='mining' or @name='construction' or @name='cement')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Industrial service output by technology and vintage">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/*[@type = 'subsector']/*[@type = 'technology']/*[@type='output'(:collapse:)]/physical-output/node()</xPath>
         <comments/>
         <showAttribute attribute-name="year" level="technology"/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Transportation">
      <supplyDemandQuery title="Transportation total final energy by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//*[@type='input' (:collapse:) and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation total final energy by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//*[@type='input' (:collapse:) and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments>trn_pass through assigns to the appropriate trn_[pass|freight]</comments>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="trn_freight_road" to="trn_freight"/>
               <rewrite from="trn_pass_road" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation total final energy by subsector (mode)">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector']//*[@type='input' (:collapse:) and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments>trn_pass through assigns to the appropriate trn_[pass|freight]</comments>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="trn_freight_road" to="trn_freight"/>
               <rewrite from="trn_pass_road" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation final energy by fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//*[@type='input' and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation final energy by service and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//*[@type='input' and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments>trn_pass through assigns to the appropriate trn_[pass|freight]</comments>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="trn_freight_road" to="trn_freight"/>
               <rewrite from="trn_pass_road" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
               <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation final energy by subsector (mode) and fuel">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector']//*[@type='input' and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation final energy by technology and fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//*[@type='technology']/*[@type='input' and not(@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation service output by service">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (exists(child::keyword[@final-energy='transportation'])) and not(@name='trn_freight_road' or @name='trn_pass_road' or @name='trn_pass_road_LDV' or @name='trn_pass_road_LDV_2W' or @name='trn_pass_road_LDV_4W') ]//*[@type='output' (: collapse :)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation service output by subsector (mode)">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector' and not(@name='road' or @name='LDV' or @name='2W' or @name='4W')]//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation service output by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector' and not(@name='road' or @name='LDV' or @name='2W' or @name='4W')]/*[@type='technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Transportation load factors">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">technology</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type='subsector']/*[@type = 'technology']//load-factor/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fuel prices to transportation">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='delivered gas' or @name='delivered coal' or @name='elect_td_trn' or @name='refined liquids enduse' or @name='H2 enduse'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Costs of transportation services">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (exists(child::keyword[@final-energy='transportation'])) and not(@name='trn_freight_road' or @name='trn_pass_road' or @name='trn_pass_road_LDV' or @name='trn_pass_road_LDV_2W' or @name='trn_pass_road_LDV_4W') ]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Costs of transportation services by mode">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector' and not(@name='road' or @name='LDV' or @name='2W' or @name='4W')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Costs of transportation services by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector' and not(@name='road' or @name='LDV' or @name='2W' or @name='4W')]/*[@type='technology']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Land Use">
      <query title="Land Allocation">
         <axis1 name="land-allocation">LandLeaf</axis1>
         <axis2 name="Year">land-allocation[@year]</axis2>
         <xPath buildList="true" dataName="land-allocation" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-allocation/text()</xPath>
         <comments/>
      </query>
      <query title="Land Allocation in AEZ 9">
         <axis1 name="land-allocation">LandLeaf</axis1>
         <axis2 name="Year">land-allocation[@year]</axis2>
         <xPath buildList="true" dataName="land-allocation" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//LandLeaf[ends-with(@name, 'AEZ09')]/land-allocation/text()</xPath>
         <comments/>
      </query>
      <query title="Aggregated Land Allocation">
         <axis1 name="land-allocation">LandLeaf</axis1>
         <axis2 name="Year">land-allocation[@year]</axis2>
         <xPath buildList="true" dataName="land-allocation" group="true" sumAll="false">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-allocation/text()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="LandLeaf">
               <rewrite from="UnmanagedForestAEZ18" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ17" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ16" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ15" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ14" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ13" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ12" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ11" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ10" to="forest (unmanaged)"/>
               <rewrite from="CornAEZ01" to="crops"/>
               <rewrite from="CornAEZ02" to="crops"/>
               <rewrite from="CornAEZ03" to="crops"/>
               <rewrite from="CornAEZ04" to="crops"/>
               <rewrite from="CornAEZ05" to="crops"/>
               <rewrite from="CornAEZ06" to="crops"/>
               <rewrite from="CornAEZ07" to="crops"/>
               <rewrite from="CornAEZ08" to="crops"/>
               <rewrite from="CornAEZ09" to="crops"/>
               <rewrite from="UnmanagedForestAEZ09" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ06" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ05" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ08" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ07" to="forest (unmanaged)"/>
               <rewrite from="UnmanagedForestAEZ02" to="forest (unmanaged)"/>
               <rewrite from="OtherGrainAEZ08" to="crops"/>
               <rewrite from="UnmanagedForestAEZ01" to="forest (unmanaged)"/>
               <rewrite from="OtherGrainAEZ07" to="crops"/>
               <rewrite from="UnmanagedForestAEZ04" to="forest (unmanaged)"/>
               <rewrite from="OtherGrainAEZ06" to="crops"/>
               <rewrite from="UnmanagedForestAEZ03" to="forest (unmanaged)"/>
               <rewrite from="OtherGrainAEZ05" to="crops"/>
               <rewrite from="OtherGrainAEZ09" to="crops"/>
               <rewrite from="OtherGrainAEZ03" to="crops"/>
               <rewrite from="OtherGrainAEZ04" to="crops"/>
               <rewrite from="OtherGrainAEZ01" to="crops"/>
               <rewrite from="OtherGrainAEZ02" to="crops"/>
               <rewrite from="FodderHerbAEZ02" to="crops"/>
               <rewrite from="FodderHerbAEZ01" to="crops"/>
               <rewrite from="FodderHerbAEZ04" to="crops"/>
               <rewrite from="FodderHerbAEZ03" to="crops"/>
               <rewrite from="RockIceDesert" to="rock and desert"/>
               <rewrite from="FodderHerbAEZ09" to="crops"/>
               <rewrite from="FodderHerbAEZ06" to="crops"/>
               <rewrite from="RiceAEZ02" to="crops"/>
               <rewrite from="OtherGrainAEZ17" to="crops"/>
               <rewrite from="FodderHerbAEZ05" to="crops"/>
               <rewrite from="RiceAEZ01" to="crops"/>
               <rewrite from="OtherGrainAEZ16" to="crops"/>
               <rewrite from="FodderHerbAEZ08" to="crops"/>
               <rewrite from="FodderHerbAEZ07" to="crops"/>
               <rewrite from="OtherGrainAEZ18" to="crops"/>
               <rewrite from="OtherGrainAEZ12" to="crops"/>
               <rewrite from="OtherGrainAEZ13" to="crops"/>
               <rewrite from="OtherGrainAEZ14" to="crops"/>
               <rewrite from="OtherGrainAEZ15" to="crops"/>
               <rewrite from="OtherGrainAEZ10" to="crops"/>
               <rewrite from="OtherGrainAEZ11" to="crops"/>
               <rewrite from="RiceAEZ11" to="crops"/>
               <rewrite from="RiceAEZ10" to="crops"/>
               <rewrite from="RiceAEZ13" to="crops"/>
               <rewrite from="RiceAEZ12" to="crops"/>
               <rewrite from="RiceAEZ03" to="crops"/>
               <rewrite from="RiceAEZ04" to="crops"/>
               <rewrite from="RiceAEZ05" to="crops"/>
               <rewrite from="RiceAEZ06" to="crops"/>
               <rewrite from="RiceAEZ07" to="crops"/>
               <rewrite from="RiceAEZ08" to="crops"/>
               <rewrite from="RiceAEZ09" to="crops"/>
               <rewrite from="UrbanLandAEZ11" to="urban"/>
               <rewrite from="RockIceDesertAEZ02" to="desert"/>
               <rewrite from="UrbanLandAEZ10" to="urban"/>
               <rewrite from="RockIceDesertAEZ01" to="desert"/>
               <rewrite from="UrbanLandAEZ13" to="urban"/>
               <rewrite from="RockIceDesertAEZ04" to="desert"/>
               <rewrite from="UrbanLandAEZ12" to="urban"/>
               <rewrite from="RockIceDesertAEZ03" to="desert"/>
               <rewrite from="UrbanLandAEZ15" to="urban"/>
               <rewrite from="UrbanLandAEZ14" to="urban"/>
               <rewrite from="UrbanLandAEZ17" to="urban"/>
               <rewrite from="UrbanLandAEZ16" to="urban"/>
               <rewrite from="UrbanLandAEZ07" to="urban"/>
               <rewrite from="ShrublandAEZ08" to="shrubs"/>
               <rewrite from="UrbanLandAEZ08" to="urban"/>
               <rewrite from="ShrublandAEZ07" to="shrubs"/>
               <rewrite from="UrbanLandAEZ09" to="urban"/>
               <rewrite from="ShrublandAEZ09" to="shrubs"/>
               <rewrite from="ShrublandAEZ02" to="shrubs"/>
               <rewrite from="ShrublandAEZ01" to="shrubs"/>
               <rewrite from="ShrublandAEZ04" to="shrubs"/>
               <rewrite from="ShrublandAEZ03" to="shrubs"/>
               <rewrite from="ShrublandAEZ06" to="shrubs"/>
               <rewrite from="ShrublandAEZ05" to="shrubs"/>
               <rewrite from="FodderHerbAEZ18" to="crops"/>
               <rewrite from="FodderHerbAEZ16" to="crops"/>
               <rewrite from="FodderHerbAEZ17" to="crops"/>
               <rewrite from="UrbanLandAEZ02" to="urban"/>
               <rewrite from="FodderHerbAEZ10" to="crops"/>
               <rewrite from="RockIceDesertAEZ15" to="desert"/>
               <rewrite from="UrbanLandAEZ01" to="urban"/>
               <rewrite from="FodderHerbAEZ11" to="crops"/>
               <rewrite from="RockIceDesertAEZ14" to="desert"/>
               <rewrite from="RockIceDesertAEZ13" to="desert"/>
               <rewrite from="RockIceDesertAEZ12" to="desert"/>
               <rewrite from="UrbanLandAEZ06" to="urban"/>
               <rewrite from="FodderHerbAEZ14" to="crops"/>
               <rewrite from="RockIceDesertAEZ11" to="desert"/>
               <rewrite from="UrbanLandAEZ05" to="urban"/>
               <rewrite from="FodderHerbAEZ15" to="crops"/>
               <rewrite from="RockIceDesertAEZ10" to="desert"/>
               <rewrite from="UrbanLandAEZ04" to="urban"/>
               <rewrite from="FodderHerbAEZ12" to="crops"/>
               <rewrite from="UrbanLandAEZ03" to="urban"/>
               <rewrite from="FodderHerbAEZ13" to="crops"/>
               <rewrite from="RockIceDesertAEZ09" to="desert"/>
               <rewrite from="ShrublandAEZ18" to="shrubs"/>
               <rewrite from="RockIceDesertAEZ07" to="desert"/>
               <rewrite from="RockIceDesertAEZ08" to="desert"/>
               <rewrite from="RockIceDesertAEZ05" to="desert"/>
               <rewrite from="RockIceDesertAEZ06" to="desert"/>
               <rewrite from="biomassAEZ01" to="biomass"/>
               <rewrite from="ShrublandAEZ13" to="shrubs"/>
               <rewrite from="ShrublandAEZ12" to="shrubs"/>
               <rewrite from="ShrublandAEZ11" to="shrubs"/>
               <rewrite from="ShrublandAEZ10" to="shrubs"/>
               <rewrite from="biomassAEZ05" to="biomass"/>
               <rewrite from="ShrublandAEZ17" to="shrubs"/>
               <rewrite from="biomassAEZ04" to="biomass"/>
               <rewrite from="ShrublandAEZ16" to="shrubs"/>
               <rewrite from="biomassAEZ03" to="biomass"/>
               <rewrite from="ShrublandAEZ15" to="shrubs"/>
               <rewrite from="biomassAEZ02" to="biomass"/>
               <rewrite from="ShrublandAEZ14" to="shrubs"/>
               <rewrite from="biomassAEZ06" to="biomass"/>
               <rewrite from="biomassAEZ07" to="biomass"/>
               <rewrite from="biomassAEZ08" to="biomass"/>
               <rewrite from="biomassAEZ09" to="biomass"/>
               <rewrite from="RockIceDesertAEZ16" to="desert"/>
               <rewrite from="RockIceDesertAEZ17" to="desert"/>
               <rewrite from="RockIceDesertAEZ18" to="desert"/>
               <rewrite from="biomassAEZ14" to="biomass"/>
               <rewrite from="biomassAEZ13" to="biomass"/>
               <rewrite from="biomassAEZ16" to="biomass"/>
               <rewrite from="biomassAEZ15" to="biomass"/>
               <rewrite from="biomassAEZ10" to="biomass"/>
               <rewrite from="biomassAEZ12" to="biomass"/>
               <rewrite from="biomassAEZ11" to="biomass"/>
               <rewrite from="CornAEZ11" to="crops"/>
               <rewrite from="CornAEZ12" to="crops"/>
               <rewrite from="CornAEZ10" to="crops"/>
               <rewrite from="biomassAEZ17" to="biomass"/>
               <rewrite from="biomassAEZ18" to="biomass"/>
               <rewrite from="UrbanLandAEZ18" to="urban"/>
               <rewrite from="CornAEZ18" to="crops"/>
               <rewrite from="CornAEZ17" to="crops"/>
               <rewrite from="CornAEZ16" to="crops"/>
               <rewrite from="CornAEZ15" to="crops"/>
               <rewrite from="CornAEZ14" to="crops"/>
               <rewrite from="CornAEZ13" to="crops"/>
               <rewrite from="ProtectedUnmanagedForestAEZ01" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ02" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ03" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ04" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ05" to="forest (unmanaged)"/>
               <rewrite from="PastureAEZ10" to="pasture (grazed)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ06" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ07" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ08" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ09" to="forest (unmanaged)"/>
               <rewrite from="PastureAEZ08" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ09" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ01" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ02" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ03" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ04" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ05" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ06" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ07" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ13" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ14" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ11" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ12" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ17" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ18" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ15" to="pasture (grazed)"/>
               <rewrite from="PastureAEZ16" to="pasture (grazed)"/>
               <rewrite from="ProtectedGrasslandAEZ12" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ13" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ14" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ15" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ10" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ11" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ16" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ17" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ18" to="grass"/>
               <rewrite from="ProtectedUnmanagedForestAEZ16" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ17" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ14" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ15" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ12" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ13" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ10" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ11" to="forest (unmanaged)"/>
               <rewrite from="ProtectedUnmanagedForestAEZ18" to="forest (unmanaged)"/>
               <rewrite from="Root_TuberAEZ12" to="crops"/>
               <rewrite from="Root_TuberAEZ13" to="crops"/>
               <rewrite from="Root_TuberAEZ10" to="crops"/>
               <rewrite from="Root_TuberAEZ11" to="crops"/>
               <rewrite from="Root_TuberAEZ18" to="crops"/>
               <rewrite from="Root_TuberAEZ16" to="crops"/>
               <rewrite from="Root_TuberAEZ17" to="crops"/>
               <rewrite from="Root_TuberAEZ14" to="crops"/>
               <rewrite from="Root_TuberAEZ15" to="crops"/>
               <rewrite from="ProtectedGrasslandAEZ08" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ07" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ06" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ05" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ09" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ04" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ03" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ02" to="grass"/>
               <rewrite from="ProtectedGrasslandAEZ01" to="grass"/>
               <rewrite from="Root_TuberAEZ01" to="crops"/>
               <rewrite from="Root_TuberAEZ02" to="crops"/>
               <rewrite from="Root_TuberAEZ07" to="crops"/>
               <rewrite from="Root_TuberAEZ08" to="crops"/>
               <rewrite from="Root_TuberAEZ09" to="crops"/>
               <rewrite from="Root_TuberAEZ03" to="crops"/>
               <rewrite from="Root_TuberAEZ04" to="crops"/>
               <rewrite from="Root_TuberAEZ05" to="crops"/>
               <rewrite from="Root_TuberAEZ06" to="crops"/>
               <rewrite from="OtherArableLandAEZ14" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ13" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ12" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ11" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ18" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ17" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ16" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ15" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ10" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ01" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ03" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ02" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ05" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ04" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ07" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ06" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ09" to="otherarable"/>
               <rewrite from="OtherArableLandAEZ08" to="otherarable"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ06" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ07" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ04" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ05" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ02" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ03" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ01" to="pasture (other)"/>
               <rewrite from="WheatAEZ17" to="crops"/>
               <rewrite from="WheatAEZ16" to="crops"/>
               <rewrite from="WheatAEZ18" to="crops"/>
               <rewrite from="WheatAEZ13" to="crops"/>
               <rewrite from="WheatAEZ12" to="crops"/>
               <rewrite from="WheatAEZ15" to="crops"/>
               <rewrite from="WheatAEZ14" to="crops"/>
               <rewrite from="WheatAEZ10" to="crops"/>
               <rewrite from="WheatAEZ11" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ10" to="pasture (other)"/>
               <rewrite from="WheatAEZ09" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ18" to="pasture (other)"/>
               <rewrite from="WheatAEZ08" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ17" to="pasture (other)"/>
               <rewrite from="WheatAEZ07" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ16" to="pasture (other)"/>
               <rewrite from="WheatAEZ06" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ15" to="pasture (other)"/>
               <rewrite from="WheatAEZ05" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ14" to="pasture (other)"/>
               <rewrite from="WheatAEZ04" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ13" to="pasture (other)"/>
               <rewrite from="WheatAEZ03" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ12" to="pasture (other)"/>
               <rewrite from="WheatAEZ02" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ11" to="pasture (other)"/>
               <rewrite from="WheatAEZ01" to="crops"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ08" to="pasture (other)"/>
               <rewrite from="ProtectedUnmanagedPastureAEZ09" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ14" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ13" to="pasture (other)"/>
               <rewrite from="GrasslandAEZ18" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ16" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ15" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ18" to="pasture (other)"/>
               <rewrite from="GrasslandAEZ15" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ17" to="pasture (other)"/>
               <rewrite from="GrasslandAEZ14" to="grass"/>
               <rewrite from="GrasslandAEZ17" to="grass"/>
               <rewrite from="GrasslandAEZ16" to="grass"/>
               <rewrite from="GrasslandAEZ11" to="grass"/>
               <rewrite from="GrasslandAEZ10" to="grass"/>
               <rewrite from="GrasslandAEZ13" to="grass"/>
               <rewrite from="GrasslandAEZ12" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ10" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ12" to="pasture (other)"/>
               <rewrite from="UnmanagedPastureAEZ11" to="pasture (other)"/>
               <rewrite from="TundraAEZ18" to="tundra"/>
               <rewrite from="UnmanagedPastureAEZ05" to="pasture (other)"/>
               <rewrite from="TundraAEZ17" to="tundra"/>
               <rewrite from="GrasslandAEZ09" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ04" to="pasture (other)"/>
               <rewrite from="TundraAEZ16" to="tundra"/>
               <rewrite from="GrasslandAEZ08" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ03" to="pasture (other)"/>
               <rewrite from="TundraAEZ15" to="tundra"/>
               <rewrite from="GrasslandAEZ07" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ02" to="pasture (other)"/>
               <rewrite from="TundraAEZ14" to="tundra"/>
               <rewrite from="GrasslandAEZ06" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ09" to="pasture (other)"/>
               <rewrite from="TundraAEZ13" to="tundra"/>
               <rewrite from="GrasslandAEZ05" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ08" to="pasture (other)"/>
               <rewrite from="TundraAEZ12" to="tundra"/>
               <rewrite from="GrasslandAEZ04" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ07" to="pasture (other)"/>
               <rewrite from="TundraAEZ11" to="tundra"/>
               <rewrite from="GrasslandAEZ03" to="grass"/>
               <rewrite from="UnmanagedPastureAEZ06" to="pasture (other)"/>
               <rewrite from="GrasslandAEZ02" to="grass"/>
               <rewrite from="MiscCropAEZ04" to="crops"/>
               <rewrite from="GrasslandAEZ01" to="grass"/>
               <rewrite from="MiscCropAEZ05" to="crops"/>
               <rewrite from="MiscCropAEZ02" to="crops"/>
               <rewrite from="MiscCropAEZ03" to="crops"/>
               <rewrite from="UnmanagedPastureAEZ01" to="pasture (other)"/>
               <rewrite from="MiscCropAEZ01" to="crops"/>
               <rewrite from="TundraAEZ10" to="tundra"/>
               <rewrite from="TundraAEZ08" to="tundra"/>
               <rewrite from="TundraAEZ09" to="tundra"/>
               <rewrite from="ForestAEZ09" to="forest (managed)"/>
               <rewrite from="TundraAEZ01" to="tundra"/>
               <rewrite from="ForestAEZ08" to="forest (managed)"/>
               <rewrite from="TundraAEZ02" to="tundra"/>
               <rewrite from="ForestAEZ07" to="forest (managed)"/>
               <rewrite from="TundraAEZ03" to="tundra"/>
               <rewrite from="TundraAEZ04" to="tundra"/>
               <rewrite from="TundraAEZ05" to="tundra"/>
               <rewrite from="TundraAEZ06" to="tundra"/>
               <rewrite from="TundraAEZ07" to="tundra"/>
               <rewrite from="ForestAEZ12" to="forest (managed)"/>
               <rewrite from="ForestAEZ13" to="forest (managed)"/>
               <rewrite from="ForestAEZ10" to="forest (managed)"/>
               <rewrite from="ForestAEZ11" to="forest (managed)"/>
               <rewrite from="ForestAEZ16" to="forest (managed)"/>
               <rewrite from="ForestAEZ17" to="forest (managed)"/>
               <rewrite from="ForestAEZ14" to="forest (managed)"/>
               <rewrite from="Tundra" to="tundra"/>
               <rewrite from="ForestAEZ15" to="forest (managed)"/>
               <rewrite from="FiberCropAEZ03" to="crops"/>
               <rewrite from="FiberCropAEZ02" to="crops"/>
               <rewrite from="FiberCropAEZ05" to="crops"/>
               <rewrite from="FiberCropAEZ04" to="crops"/>
               <rewrite from="FiberCropAEZ01" to="crops"/>
               <rewrite from="ForestAEZ01" to="forest (managed)"/>
               <rewrite from="ForestAEZ02" to="forest (managed)"/>
               <rewrite from="ForestAEZ03" to="forest (managed)"/>
               <rewrite from="ForestAEZ04" to="forest (managed)"/>
               <rewrite from="ForestAEZ05" to="forest (managed)"/>
               <rewrite from="ForestAEZ06" to="forest (managed)"/>
               <rewrite from="FiberCropAEZ12" to="crops"/>
               <rewrite from="FiberCropAEZ11" to="crops"/>
               <rewrite from="FiberCropAEZ10" to="crops"/>
               <rewrite from="OilCropAEZ16" to="crops"/>
               <rewrite from="FiberCropAEZ16" to="crops"/>
               <rewrite from="OilCropAEZ15" to="crops"/>
               <rewrite from="FiberCropAEZ15" to="crops"/>
               <rewrite from="OilCropAEZ18" to="crops"/>
               <rewrite from="FiberCropAEZ14" to="crops"/>
               <rewrite from="OilCropAEZ17" to="crops"/>
               <rewrite from="FiberCropAEZ13" to="crops"/>
               <rewrite from="OilCropAEZ12" to="crops"/>
               <rewrite from="OilCropAEZ11" to="crops"/>
               <rewrite from="OilCropAEZ14" to="crops"/>
               <rewrite from="OilCropAEZ13" to="crops"/>
               <rewrite from="OilCropAEZ10" to="crops"/>
               <rewrite from="FiberCropAEZ08" to="crops"/>
               <rewrite from="FiberCropAEZ09" to="crops"/>
               <rewrite from="FiberCropAEZ06" to="crops"/>
               <rewrite from="FiberCropAEZ07" to="crops"/>
               <rewrite from="OilCropAEZ09" to="crops"/>
               <rewrite from="OilCropAEZ08" to="crops"/>
               <rewrite from="OilCropAEZ07" to="crops"/>
               <rewrite from="OilCropAEZ06" to="crops"/>
               <rewrite from="OilCropAEZ05" to="crops"/>
               <rewrite from="OilCropAEZ04" to="crops"/>
               <rewrite from="OilCropAEZ03" to="crops"/>
               <rewrite from="OilCropAEZ02" to="crops"/>
               <rewrite from="OilCropAEZ01" to="crops"/>
               <rewrite from="ForestAEZ18" to="forest (managed)"/>
               <rewrite from="FiberCropAEZ17" to="crops"/>
               <rewrite from="FiberCropAEZ18" to="crops"/>
               <rewrite from="PalmFruitAEZ10" to="crops"/>
               <rewrite from="PalmFruitAEZ13" to="crops"/>
               <rewrite from="PalmFruitAEZ14" to="crops"/>
               <rewrite from="PalmFruitAEZ11" to="crops"/>
               <rewrite from="PalmFruitAEZ12" to="crops"/>
               <rewrite from="PalmFruitAEZ17" to="crops"/>
               <rewrite from="SugarCropAEZ13" to="crops"/>
               <rewrite from="PalmFruitAEZ18" to="crops"/>
               <rewrite from="SugarCropAEZ14" to="crops"/>
               <rewrite from="PalmFruitAEZ15" to="crops"/>
               <rewrite from="SugarCropAEZ11" to="crops"/>
               <rewrite from="PalmFruitAEZ16" to="crops"/>
               <rewrite from="SugarCropAEZ12" to="crops"/>
               <rewrite from="SugarCropAEZ17" to="crops"/>
               <rewrite from="SugarCropAEZ18" to="crops"/>
               <rewrite from="SugarCropAEZ15" to="crops"/>
               <rewrite from="SugarCropAEZ16" to="crops"/>
               <rewrite from="SugarCropAEZ10" to="crops"/>
               <rewrite from="PalmFruitAEZ01" to="crops"/>
               <rewrite from="PalmFruitAEZ02" to="crops"/>
               <rewrite from="PalmFruitAEZ03" to="crops"/>
               <rewrite from="PalmFruitAEZ04" to="crops"/>
               <rewrite from="PalmFruitAEZ05" to="crops"/>
               <rewrite from="PalmFruitAEZ06" to="crops"/>
               <rewrite from="PalmFruitAEZ07" to="crops"/>
               <rewrite from="PalmFruitAEZ08" to="crops"/>
               <rewrite from="PalmFruitAEZ09" to="crops"/>
               <rewrite from="FodderGrassAEZ10" to="crops"/>
               <rewrite from="FodderGrassAEZ11" to="crops"/>
               <rewrite from="FodderGrassAEZ12" to="crops"/>
               <rewrite from="FodderGrassAEZ17" to="crops"/>
               <rewrite from="FodderGrassAEZ18" to="crops"/>
               <rewrite from="FodderGrassAEZ13" to="crops"/>
               <rewrite from="FodderGrassAEZ14" to="crops"/>
               <rewrite from="FodderGrassAEZ15" to="crops"/>
               <rewrite from="FodderGrassAEZ16" to="crops"/>
               <rewrite from="miscanthusAEZ17" to="biomass"/>
               <rewrite from="miscanthusAEZ16" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ10" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ11" to="shrubs"/>
               <rewrite from="miscanthusAEZ18" to="biomass"/>
               <rewrite from="willowAEZ17" to="biomass"/>
               <rewrite from="willowAEZ18" to="biomass"/>
               <rewrite from="willowAEZ15" to="biomass"/>
               <rewrite from="willowAEZ16" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ17" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ16" to="shrubs"/>
               <rewrite from="miscanthusAEZ10" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ18" to="shrubs"/>
               <rewrite from="miscanthusAEZ11" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ13" to="shrubs"/>
               <rewrite from="miscanthusAEZ12" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ12" to="shrubs"/>
               <rewrite from="miscanthusAEZ13" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ15" to="shrubs"/>
               <rewrite from="miscanthusAEZ14" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ14" to="shrubs"/>
               <rewrite from="miscanthusAEZ15" to="biomass"/>
               <rewrite from="SugarCropAEZ08" to="crops"/>
               <rewrite from="SugarCropAEZ09" to="crops"/>
               <rewrite from="SugarCropAEZ04" to="crops"/>
               <rewrite from="SugarCropAEZ05" to="crops"/>
               <rewrite from="willowAEZ10" to="biomass"/>
               <rewrite from="SugarCropAEZ06" to="crops"/>
               <rewrite from="SugarCropAEZ07" to="crops"/>
               <rewrite from="willowAEZ12" to="biomass"/>
               <rewrite from="willowAEZ11" to="biomass"/>
               <rewrite from="UrbanLand" to="urban"/>
               <rewrite from="SugarCropAEZ01" to="crops"/>
               <rewrite from="willowAEZ14" to="biomass"/>
               <rewrite from="SugarCropAEZ02" to="crops"/>
               <rewrite from="willowAEZ13" to="biomass"/>
               <rewrite from="SugarCropAEZ03" to="crops"/>
               <rewrite from="willowAEZ07" to="biomass"/>
               <rewrite from="willowAEZ08" to="biomass"/>
               <rewrite from="willowAEZ09" to="biomass"/>
               <rewrite from="ProtectedShrublandAEZ09" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ08" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ07" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ06" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ05" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ04" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ03" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ02" to="shrubs"/>
               <rewrite from="ProtectedShrublandAEZ01" to="shrubs"/>
               <rewrite from="eucalyptusAEZ14" to="biomass"/>
               <rewrite from="MiscCropAEZ08" to="crops"/>
               <rewrite from="eucalyptusAEZ15" to="biomass"/>
               <rewrite from="MiscCropAEZ09" to="crops"/>
               <rewrite from="eucalyptusAEZ16" to="biomass"/>
               <rewrite from="MiscCropAEZ06" to="crops"/>
               <rewrite from="eucalyptusAEZ17" to="biomass"/>
               <rewrite from="MiscCropAEZ07" to="crops"/>
               <rewrite from="eucalyptusAEZ10" to="biomass"/>
               <rewrite from="eucalyptusAEZ11" to="biomass"/>
               <rewrite from="eucalyptusAEZ12" to="biomass"/>
               <rewrite from="eucalyptusAEZ13" to="biomass"/>
               <rewrite from="MiscCropAEZ12" to="crops"/>
               <rewrite from="MiscCropAEZ11" to="crops"/>
               <rewrite from="MiscCropAEZ10" to="crops"/>
               <rewrite from="MiscCropAEZ16" to="crops"/>
               <rewrite from="eucalyptusAEZ08" to="biomass"/>
               <rewrite from="MiscCropAEZ15" to="crops"/>
               <rewrite from="eucalyptusAEZ07" to="biomass"/>
               <rewrite from="MiscCropAEZ14" to="crops"/>
               <rewrite from="MiscCropAEZ13" to="crops"/>
               <rewrite from="eucalyptusAEZ09" to="biomass"/>
               <rewrite from="JatrophaAEZ01" to="biomass"/>
               <rewrite from="JatrophaAEZ02" to="biomass"/>
               <rewrite from="JatrophaAEZ03" to="biomass"/>
               <rewrite from="JatrophaAEZ04" to="biomass"/>
               <rewrite from="JatrophaAEZ05" to="biomass"/>
               <rewrite from="JatrophaAEZ06" to="biomass"/>
               <rewrite from="MiscCropAEZ17" to="crops"/>
               <rewrite from="eucalyptusAEZ05" to="biomass"/>
               <rewrite from="MiscCropAEZ18" to="crops"/>
               <rewrite from="eucalyptusAEZ06" to="biomass"/>
               <rewrite from="miscanthusAEZ09" to="biomass"/>
               <rewrite from="eucalyptusAEZ03" to="biomass"/>
               <rewrite from="eucalyptusAEZ04" to="biomass"/>
               <rewrite from="miscanthusAEZ07" to="biomass"/>
               <rewrite from="eucalyptusAEZ01" to="biomass"/>
               <rewrite from="miscanthusAEZ08" to="biomass"/>
               <rewrite from="eucalyptusAEZ02" to="biomass"/>
               <rewrite from="miscanthusAEZ05" to="biomass"/>
               <rewrite from="miscanthusAEZ06" to="biomass"/>
               <rewrite from="miscanthusAEZ04" to="biomass"/>
               <rewrite from="miscanthusAEZ03" to="biomass"/>
               <rewrite from="miscanthusAEZ02" to="biomass"/>
               <rewrite from="miscanthusAEZ01" to="biomass"/>
               <rewrite from="FodderGrassAEZ05" to="crops"/>
               <rewrite from="FodderGrassAEZ04" to="crops"/>
               <rewrite from="FodderGrassAEZ03" to="crops"/>
               <rewrite from="FodderGrassAEZ02" to="crops"/>
               <rewrite from="FodderGrassAEZ09" to="crops"/>
               <rewrite from="FodderGrassAEZ08" to="crops"/>
               <rewrite from="FodderGrassAEZ07" to="crops"/>
               <rewrite from="FodderGrassAEZ06" to="crops"/>
               <rewrite from="FodderGrassAEZ01" to="crops"/>
               <rewrite from="RiceAEZ15" to="crops"/>
               <rewrite from="RiceAEZ14" to="crops"/>
               <rewrite from="RiceAEZ17" to="crops"/>
               <rewrite from="RiceAEZ16" to="crops"/>
               <rewrite from="RiceAEZ18" to="crops"/>
               <rewrite from="eucalyptusAEZ18" to="biomass"/>
            </level>
         </labelRewriteList>
      </query>
      <query title="Land Use Change Emission">
         <axis1 name="land-use-change-emission">LandLeaf</axis1>
         <axis2 name="Year">land-use-change-emission[@year]</axis2>
         <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-use-change-emission/text()</xPath>
         <comments/>
      </query>
      <query title="Land Use Change Emission (future)">
         <axis1 name="land-use-change-emission">LandLeaf</axis1>
         <axis2 name="Year">land-use-change-emission[@year]</axis2>
         <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-use-change-emission[@year&gt;1975]/text()</xPath>
         <comments/>
      </query>
      <query title="Profit Rate">
         <axis1 name="profit-rate">LandLeaf</axis1>
         <axis2 name="Year">profit-rate[@year]</axis2>
         <xPath buildList="true" dataName="profit-rate" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//profit-rate/text()</xPath>
         <comments/>
      </query>
      <query title="Shares">
         <axis1 name="share">LandLeaf</axis1>
         <axis2 name="Year">share[@year]</axis2>
         <xPath buildList="true" dataName="share" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//share/text()</xPath>
         <comments/>
      </query>
   </queryGroup>
   <queryGroup name="Agricultural Production">
      <supplyDemandQuery title="Ag Production by Crop Type">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'AgSupplySector' or @name='NonFoodDemand_Forest')]//*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Ag Production by Crop Type and AEZ">
         <axis1 name="technology">technology[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'AgSupplySector' or @name='NonFoodDemand_Forest')]/*[@type = 'subsector']/*[@type = 'technology']/*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Variable Cost">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">technology</axis2>
         <xPath buildList="true" dataName="nonLandVariableCost" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/nonLandVariableCost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Yield">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">technology</axis2>
         <xPath buildList="true" dataName="yield" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/yield/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Ag Commodity Prices">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="yield" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'AgSupplySector')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Fertilizer Queries">
      <supplyDemandQuery title="Fertilizer Production by Region">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and (@name='N fertilizer')]/*[@type = 'subsector' (:collapse:) and not (@name='Imports')]//*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer Production by Technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='N fertilizer')]//*[@type = 'technology' and not (@name='Imports')]/*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Inputs to Fertilizer Production by Technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='N fertilizer')]//*[@type = 'technology' and not (@name = 'Imports')]/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer Demands by Region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and not (@name='Exports_N fertilizer')]//*[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer Demands by Crop Type">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and not (@name='Exports_N fertilizer')]//*[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer Demands by Crop Type and AEZ">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and not (@name='Exports_fertilizer')]/*[@type = 'subsector']//*[@type='input' and (@name='N fertilizer')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer price">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='N fertilizer')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Fertilizer cost by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='N fertilizer')]//*[@type = 'technology' and not (@name='Imports')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <emissionsQueryBuilder title="CO2 emissions from fertilizer production">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' and (@name='N fertilizer')]//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
   </queryGroup>
   <queryGroup name="Animals">
      <supplyDemandQuery title="Meat Output By Technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and ((@name='Beef') or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry' )]//*[@type = 'technology']/*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Feed Demands by Meat Production">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and ((@name='Beef') or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry' )]//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Feed Types by Crop">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and ((@name='FodderHerb_Residue') or @name='Pasture_FodderGrass' or @name='FeedCrops' or @name='Scavenging_Other')]//*[@type = 'technology']/*[@type='input']/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Meat Prices">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and ((@name='Beef') or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Biomass">
      <supplyDemandQuery title="Purpose-grown biomass production">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector' and @name='biomass']//*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Residue biomass production">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='output' and @name='biomass']/physical-output/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="biomass" to=""/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      <resourceQuery title="MSW production">
         <axis1 name="resource">resource</axis1>
         <axis2 name="Year">output</axis2>
         <xPath buildList="false" dataName="production" group="false" sumAll="false">*[@type = 'resource' and (@name='biomass')]//output/node()</xPath>
         <comments/>
      </resourceQuery>
      <supplyDemandQuery title="Total biomass consumption">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="false" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='regional biomass')]//*[@type='input']/demand-physical/node()</xPath>
         <comments>Supply sectors only.</comments>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Ag Demands">
      <supplyDemandQuery title="Food Consumption By Type">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='FoodDemand_Crops' or @name='FoodDemand_Meat')]//*[@type = 'technology']/*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Demand Balances by Primary Good">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector']//*[@type='input' and (@name='Corn' or @name='FiberCrop' or @name='FodderGrass' or @name='FodderHerb' or @name='MiscCrop' or @name='OilCrop' or @name='OtherGrain' or @name='PalmFruit' or @name='Rice' or @name='Root_Tuber' or @name='SugarCrop' or @name='Wheat' or @name='Forest' or @name='Pasture')]/demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="GHG emissions">
      <emissionsQueryBuilder title="GHG emissions by region">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (: collapse :)]//*[@type = 'GHG']/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="GHG emissions by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type='GHG'])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type='GHG'])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector']//*[@type = 'GHG']/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="GHG emissions by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type='GHG'])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type='GHG'])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]//*[@type='technology']/*[@type = 'GHG']/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CH4 emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='CH4' or @name='CH4_AWB' or @name='CH4_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='CH4' or @name='CH4_AWB' or @name='CH4_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='CH4' or @name='CH4_AWB' or @name='CH4_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="N2O emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='N2O' or @name='N2O_AWB' or @name='N2O_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='N2O' or @name='N2O_AWB' or @name='N2O_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='N2O' or @name='N2O_AWB' or @name='N2O_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="NOx emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='NOx' or @name='NOx_AWB' or @name='NOx_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='NOx' or @name='NOx_AWB' or @name='NOx_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='NOx' or @name='NOx_AWB' or @name='NOx_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="SO2 emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='SO2_1' or @name='SO2_2' or @name='SO2_3' or @name='SO2_4' or @name='SO2_1_AWB' or @name='SO2_2_AWB' or @name='SO2_3_AWB' or @name='SO2_4_AWB') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='SO2_1' or @name='SO2_2' or @name='SO2_3' or @name='SO2_4' or @name='SO2_1_AWB' or @name='SO2_2_AWB' or @name='SO2_3_AWB' or @name='SO2_4_AWB') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='SO2_1' or @name='SO2_2' or @name='SO2_3' or @name='SO2_4' or @name='SO2_1_AWB' or @name='SO2_2_AWB' or @name='SO2_3_AWB' or @name='SO2_4_AWB') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="BC emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='BC' or @name='BC_AWB' or @name='BC_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='BC' or @name='BC_AWB' or @name='BC_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='BC' or @name='BC_AWB' or @name='BC_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="OC emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='OC' or @name='OC_AWB' or @name='OC_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='OC' or @name='OC_AWB' or @name='OC_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='OC' or @name='OC_AWB' or @name='OC_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CO emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='CO' or @name='CO_AWB' or @name='CO_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='CO' or @name='CO_AWB' or @name='CO_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='CO' or @name='CO_AWB' or @name='CO_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="NMVOC emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='NMVOC' or @name='NMVOC_AWB' or @name='NMVOC_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='NMVOC' or @name='NMVOC_AWB' or @name='NMVOC_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='NMVOC' or @name='NMVOC_AWB' or @name='NMVOC_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="NH3 emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type = 'GHG' and ((@name='NH3' or @name='NH3_AWB' or @name='NH3_AGR') )])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type = 'GHG' and ((@name='NH3' or @name='NH3_AWB' or @name='NH3_AGR') )])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG' and ((@name='NH3' or @name='NH3_AWB' or @name='NH3_AGR') )]/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="GHG emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false"> 
			 	 	 declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type='GHG'])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };  
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type='GHG'])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG']/emissions/node()
	 	 }; 
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
	 </xPath>
         <comments/>
      </emissionsQueryBuilder>
   </queryGroup>
   <queryGroup name="CO2">
      <emissionsQueryBuilder title="CO2 emissions by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:)]//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CO2 emissions by aggregate sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//CO2/emissions/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="gas pipeline" to="gas systems"/>
               <rewrite from="boilers general" to="industry"/>
               <rewrite from="refining" to="liquid systems"/>
               <rewrite from="H2 central production" to="hydrogen"/>
               <rewrite from="trn_freight" to="transportation"/>
               <rewrite from="machine drive" to="industry"/>
               <rewrite from="gas processing" to="gas systems"/>
               <rewrite from="regional biomass" to="biomass systems"/>
               <rewrite from="industrial energy use" to="industry"/>
               <rewrite from="comm cooling" to="building"/>
               <rewrite from="feedstocks chemicals" to="industry"/>
               <rewrite from="cement" to="industry"/>
               <rewrite from="unconventional oil production" to="liquid systems"/>
               <rewrite from="electrochemical" to="industry"/>
               <rewrite from="comm lighting" to="building"/>
               <rewrite from="comm office" to="building"/>
               <rewrite from="construction energy use" to="industry"/>
               <rewrite from="comm cooking" to="building"/>
               <rewrite from="resid hot water" to="building"/>
               <rewrite from="resid heating" to="building"/>
               <rewrite from="regional biomassOil" to="biomass systems"/>
               <rewrite from="boilers pulp paper and wood" to="industry"/>
               <rewrite from="comm ventilation" to="building"/>
               <rewrite from="comm hot water" to="building"/>
               <rewrite from="mining energy use" to="industry"/>
               <rewrite from="resid lighting" to="building"/>
               <rewrite from="resid others" to="building"/>
               <rewrite from="resid other" to="building"/>
               <rewrite from="trn_pass_road" to="transportation"/>
               <rewrite from="backup_electricity" to="electricity"/>
               <rewrite from="agriculture energy use" to="industry"/>
               <rewrite from="process heat primary metals" to="industry"/>
               <rewrite from="csp_backup" to="electricity"/>
               <rewrite from="feedstocks construction" to="industry"/>
               <rewrite from="trn_shipping_intl" to="transportation"/>
               <rewrite from="comm other" to="building"/>
               <rewrite from="resid other appliances" to="building"/>
               <rewrite from="H2 forecourt production" to="hydrogen"/>
               <rewrite from="process heat cement" to="industry"/>
               <rewrite from="feedstocks primary metals" to="industry"/>
               <rewrite from="other end uses" to="industry"/>
               <rewrite from="trn_passenger" to="transportation"/>
               <rewrite from="resid appliances" to="building"/>
               <rewrite from="regional corn for ethanol" to="biomass systems"/>
               <rewrite from="comm heating" to="building"/>
               <rewrite from="industrial feedstocks" to="industry"/>
               <rewrite from="process heat general" to="industry"/>
               <rewrite from="comm others" to="building"/>
               <rewrite from="limestone feedstocks" to=""/>
               <rewrite from="resid cooling" to="building"/>
               <rewrite from="comm refrigeration" to="building"/>
               <rewrite from="trn_aviation_intl" to="transportation"/>
               <rewrite from="trn_freight_road" to="transportation"/>
               <rewrite from="trn_pass" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
               <rewrite from="N fertilizer" to="industry"/>
            </level>
         </labelRewriteList>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CO2 emissions by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <supplyDemandQuery title="Biomass consumption by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'supplysector')]//*[@type='input' and (@name='regional biomass' or @name='delivered biomass' or @name='refining' or @name='gas processing' or @name='wholesale gas' or @name='delivered gas' or @name='H2 central production' or @name='H2 distribution' or @name='H2 enduse')]/demand-physical/node()</xPath>
         <comments>Supply sectors only</comments>
      </supplyDemandQuery>
      <emissionsQueryBuilder title="CO2 emissions by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CO2 emissions by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <supplyDemandQuery title="CO2 Emissions by enduse">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">emissions[@year]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($inputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('unconventional oil production', "electricity", "cement", "N fertilizer"),
$inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]))
then 
local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $inputName := $inputNameQueue[1],
                        $newInputNameQueue := remove($inputNameQueue, 1),
                        $useInputs := $currTree//*[@type='input' and @name=$inputName],
                        $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
                        $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
                                          return element input {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useInputs/demand-physical[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := if(empty($useSectors)) then
                                         $coefs
                                     else
                                         $coefs | element sector {
                                            attribute name { $inputName },
                                            for $output in $useSectors
                                            return element output {
                                                       attribute name { $output },
                                                       for $inputSum in $totalInputSum
                                                       let $outputSum := sum($useInputs[ancestor::*[@type='sector' and @name=$output]]/demand-physical[@vintage=$inputSum/@vintage])
                                                       return element coef {
                                                                  attribute vintage { $inputSum/@vintage },
                                                                  text { $outputSum div $inputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) &gt; 0.001) then
                for $output in $coefs[@name=$outputName]/output
                return local:apply-coefs($output/@name,
                    for $year in distinct-values($emissions/@year)
                    let $emissThisVintage := $emissions[@year=$year],
                        $firstEmiss := $emissThisVintage[1],
                        $emissSum := sum($emissThisVintage),
                        $coefThisVintage := $output/coef[@vintage=$year]
                    where $coefThisVintage &gt; 0
                    return element { local-name($firstEmiss) } {
                            $firstEmiss/@*,
                            text{ $emissSum * $coefThisVintage }
                        }
	       			, $coefs)
            else if( abs(sum($emissions)) &gt; 0.001) then
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' },
                    (: $emissions :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $e in $emissions
                    return element emissions { $e/@*, text{ $e/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element sector {
                    attribute name { $outputName },
                    attribute type { 'sector' }(:,
                    $emissions:)
                }
        };
		declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currEmissSectors := $currTree/*[@type='sector' and descendant::CO2],
                 $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false())
				 return
				    for $sectorName in distinct-values($currEmissSectors/@name)
                    return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2/emissions, $coefs))//text()
			 	 } 
	 	 };
		 local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
               </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="N fertilizer" to="industry"/>
               <rewrite from="unconventional oil production" to="industry"/>
               <rewrite from="comm cooling" to="buildings"/>
               <rewrite from="comm heating" to="buildings"/>
               <rewrite from="comm others" to="buildings"/>
               <rewrite from="resid cooling" to="buildings"/>
               <rewrite from="resid heating" to="buildings"/>
               <rewrite from="resid others" to="buildings"/>
               <rewrite to="transportation" from="trn_aviation_intl"/>
               <rewrite to="transportation" from="trn_freight"/>
               <rewrite to="transportation" from="trn_freight_road"/>
               <rewrite to="transportation" from="trn_pass_road"/>
               <rewrite to="transportation" from="trn_pass_road_bus"/>
               <rewrite to="transportation" from="trn_pass_road_LDV"/>
               <rewrite to="transportation" from="trn_pass_road_LDV_4W"/>
               <rewrite to="transportation" from="trn_pass_road_LDV_2W"/>
               <rewrite to="transportation" from="trn_passenger"/>
               <rewrite to="transportation" from="trn_pass"/>
               <rewrite to="transportation" from="trn_shipping_intl"/>
           </level>
       </labelRewriteList>
      </supplyDemandQuery>
      <emissionsQueryBuilder title="CO2 sequestration by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions-sequestered</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]//CO2/emissions-sequestered/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="backup_electricity" to="electricity"/>
               <rewrite from="csp_backup" to="electricity"/>
            </level>
         </labelRewriteList>
      </emissionsQueryBuilder>
      <emissionsQueryBuilder title="CO2 sequestration by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions-sequestered</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']//CO2/emissions-sequestered/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      <marketQuery title="CO2 prices">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true() and contains(@name,'CO2')]/price/node()</xPath>
         <comments/>
      </marketQuery>
   </queryGroup>
   <queryGroup name="Climate">
      <ClimateQuery title="CO2 concentrations">
         <axis1 name="CO2-concentration">none</axis1>
         <axis2 name="Year">CO2-concentration[@year]</axis2>
         <xPath buildList="true" dataName="CO2-concentration" group="false" sumAll="false">climate-model/CO2-concentration/text()</xPath>
         <comments/>
      </ClimateQuery>
      <ClimateQuery title="Climate forcing">
         <axis1 name="forcing-total">none</axis1>
         <axis2 name="Year">forcing-total[@year]</axis2>
         <xPath buildList="true" dataName="forcing-total" group="false" sumAll="false">climate-model/forcing-total/text()</xPath>
         <comments/>
      </ClimateQuery>
      <ClimateQuery title="RCP forcing">
         <axis1 name="forcing-RCP">none</axis1>
         <axis2 name="Year">forcing-RCP[@year]</axis2>
         <xPath buildList="true" dataName="forcing-RCP" group="false" sumAll="false">climate-model/forcing-RCP/text()</xPath>
         <comments/>
      </ClimateQuery>
      <ClimateQuery title="Kyoto gas forcing">
         <axis1 name="forcing-Kyoto">none</axis1>
         <axis2 name="Year">forcing-Kyoto[@year]</axis2>
         <xPath buildList="true" dataName="forcing-Kyoto" group="false" sumAll="false">climate-model/forcing-Kyoto/text()</xPath>
         <comments/>
      </ClimateQuery>
      <ClimateQuery title="Global mean temperature">
         <axis1 name="temperature">none</axis1>
         <axis2 name="Year">global-mean-temperature[@year]</axis2>
         <xPath buildList="true" dataName="global-mean-temperature" group="false" sumAll="false">climate-model/global-mean-temperature/text()</xPath>
         <comments/>
      </ClimateQuery>
   </queryGroup>
   <queryGroup name="Policy Costs">
      <costCurveQuery title="Policy Cost By Period">
         <axis1 name="Region">Curve</axis1>
         <axis2 name="Year">DataPoint</axis2>
         <xPath buildList="true" dataName="Cost" group="false" sumAll="false">PointSet/DataPoint/y/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="Undiscounted policy cost">
         <axis1 name="UndiscountedCost">UndiscountedCost</axis1>
         <axis2 name="Region">UndiscountedCost</axis2>
         <xPath buildList="true" dataName="Undiscounted Cost" group="false" sumAll="false">/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="Discounted policy cost">
         <axis1 name="DiscountedCost">DiscountedCost</axis1>
         <axis2 name="Region">DiscountedCost</axis2>
         <xPath buildList="true" dataName="Discounted Cost" group="false" sumAll="false">/text()</xPath>
         <comments/>
      </costCurveQuery>
      <costCurveQuery title="Regional CO2 MAC curves by period">
         <axis1 name="Region">Curve</axis1>
         <axis2 name="Tax">DataPoint</axis2>
         <chartLabelColumn>CostCurves</chartLabelColumn>
         <xPath buildList="true" dataName="Cost" group="false" sumAll="false">PointSet/DataPoint/x/text()</xPath>
         <comments/>
      </costCurveQuery>
   </queryGroup>
   <queryGroup name="Markets and Prices General">
      <marketQuery title="Prices for all markets">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
         <comments/>
      </marketQuery>
      <supplyDemandQuery title="Prices by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Prices by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Prices by technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">technology</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Prices: technology fuel cost">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">price-paid[@vintage]</axis2>
         <xPath buildList="true" dataName="fuel cost" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/*[@type='input' and @name!='non-energy']/price-paid/text()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Prices: technology non-energy cost">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">price-paid[@vintage]</axis2>
         <xPath buildList="true" dataName="non energy cost" group="false" sumAll="false">*[@type = 'sector']/*[@type = 'subsector']/*[@type = 'technology']/*[@type='input' (: collapse :) and @name='non-energy']/price-paid/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
   <queryGroup name="Socioeconomics">
      <demographicsQuery title="Population by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">populationMiniCAM</axis2>
         <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
         <comments/>
      </demographicsQuery>
      <gdpQueryBuilder title="GDP MER by region">
         <axis1 name="Region">region</axis1>
         <axis2 name="Year">gdp-mer</axis2>
         <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
      <gdpQueryBuilder title="GDP per capita PPP by region">
         <axis1 name="Region">region</axis1>
         <axis2 name="Year">gdp-per-capita-ppp</axis2>
         <xPath buildList="true" dataName="gdp-per-capita-ppp" group="false" sumAll="false">GDP/gdp-per-capita-ppp/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
      <gdpQueryBuilder title="GDP per capita MER by region">
         <axis1 name="Region">region</axis1>
         <axis2 name="Year">gdp-per-capita-mer</axis2>
         <xPath buildList="true" dataName="gdp-per-capita-mer" group="false" sumAll="false">GDP/gdp-per-capita-mer/text()</xPath>
         <comments/>
      </gdpQueryBuilder>
   </queryGroup>
   <queryGroup name="General">
      <supplyDemandQuery title="Energy consumption by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input']/demand-physical[@unit='EJ']/node()</xPath>
         <comments>Supply sectors only.</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Energy consumption by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='input']/demand-physical[@unit='EJ']/node()</xPath>
         <comments>Supply sectors only.</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Energy consumption by technology">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='technology']/*[@type='input']/demand-physical[@unit='EJ']/node()</xPath>
         <comments>Supply sectors only.</comments>
      </supplyDemandQuery>
      <supplyDemandQuery title="Service output by sector">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='output']/physical-output[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Service output by subsector">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']//*[@type='output']/physical-output[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Service output by technology">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']/*[@type='subsector']/*[@type='technology']/*[@type='output']/physical-output[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      <supplyDemandQuery title="Cogeneration by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'technology' (:collapse:)]/output-secondary[@name='electricity']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </queryGroup>
</queries>
